# Tailwind CSS 베스트 프랙티스

## 1. 참고 파일 안내

| 상황/패턴 | 참고 파일 |
|---|---|
| Tailwind 포맷/유틸리티 | packages/ui/tailwind.config.cjs, packages/theme/tailwind.config.cjs |
| 디자인 토큰(CSS 변수) | packages/theme/src/styles/__tokens-light.css, __tokens-dark.css |
| SCSS(Sass) | 각 컴포넌트의 .scss 파일, packages/ui/src/style.css |
| 하이브리드/동적 스타일 | 위 모든 파일 + 컴포넌트 내 computed/style 로직 |

> **참고:**
> - Tailwind 커스텀 유틸리티/색상/spacing 등은 반드시 tailwind.config.cjs에서 확인/추가
> - 디자인 토큰(CSS 변수)은 __tokens-light.css, __tokens-dark.css에서 확인
> - SCSS에서 @apply, CSS 변수 사용 시 위 파일 경로 참고

---

## 2. 스타일 적용 기본 원칙
- **기본 스타일은 모두 class 기반(Tailwind/SCSS)으로 정의한다.**
- **단순한 색상/값 적용은 정적 CSS 변수(Tailwind arbitrary value)로 처리한다.**
- **조건부 변경이 필요한 경우만 :style로 동적 처리한다.**
- **SCSS(Sass)를 적극 활용한다.**
- **디자인 토큰은 CSS 변수로 관리하고, class에서 arbitrary value로 활용한다.**

---

## 3. 상황별 권장 방식

| 상황 | 권장 방식 | 참고 파일 |
|------|-----------|-----------|
| 단순 색상/값 적용 | 정적 CSS 변수 (Tailwind arbitrary value) | __tokens-light.css |
| 조건부 색상 변경 | 동적 CSS 변수 (:style) | __tokens-light.css, 컴포넌트 |
| 반응형/상태 클래스 | Tailwind 클래스 | tailwind.config.cjs |
| 복잡한 조건부 스타일 | 하이브리드 | tailwind.config.cjs, __tokens-light.css, 컴포넌트 |
| 정적 컴포넌트 스타일 | Tailwind 클래스 | tailwind.config.cjs |

---

## 4. 상황별 스타일 적용 예시

### 4.1 정적 CSS 변수 (Tailwind arbitrary value) - 권장
```vue
<!-- 단순한 색상/값 적용 - 성능 우수 -->
<!-- 참고: __tokens-light.css -->
<button class="
  bg-[var(--button-primary-background)]
  text-[var(--button-primary-text)]
  border-[var(--button-primary-border)]
  hover:bg-[var(--button-primary-background-deep)]
  disabled:bg-[var(--button-disabled-background)]
">
  Primary
</button>
```

### 4.2 동적 CSS 변수 (:style) - 조건부 변경 시만
```vue
<!-- 조건부 색상 변경이 필요한 경우만 -->
<!-- 참고: __tokens-light.css, 컴포넌트 내 computed -->
<script setup>
const buttonStyle = computed(() => {
  if (isDisabled.value) {
    return {
      backgroundColor: 'var(--button-disabled-background)',
      color: 'var(--button-disabled-text)'
    };
  }
  return {
    backgroundColor: `var(--button-${props.variant}-background)`,
    color: `var(--button-${props.variant}-text)`
  };
});
</script>
<template>
  <button :style="buttonStyle">
    {{ label }}
  </button>
</template>
```

### 4.3 하이브리드 접근법 (최적)
```vue
<!-- 정적 색상 + 동적 조건부 스타일 -->
<!-- 참고: __tokens-light.css, 컴포넌트 내 computed -->
<script setup>
// 정적 색상은 클래스로, 동적 스타일만 :style로
const staticClasses = computed(() => 
  `bg-[var(--button-${props.variant}-background)] text-[var(--button-${props.variant}-text)]`
);

const dynamicStyle = computed(() => {
  // 조건부 변경이 필요한 경우만
  if (borderVariants.includes(props.variant)) {
    return {
      borderWidth: '1px',
      borderStyle: 'solid',
      borderColor: `var(--button-${props.variant}-border)`
    };
  }
  return {};
});
</script>
<template>
  <button
    :class="[baseClasses, staticClasses]"
    :style="dynamicStyle"
  >
    {{ label }}
  </button>
</template>
```

### 4.4 :class 사용 가이드
```vue
<!-- 조건/상태/반응형에 따라 Tailwind 클래스 조합 -->
<!-- 참고: tailwind.config.cjs, __tokens-light.css -->
<template>
  <button
    :class="[
      'inline-flex items-center px-4 py-2 rounded-lg font-semibold transition-all',
      // 정적 색상은 arbitrary value로
      'bg-[var(--button-primary-background)] text-[var(--button-primary-text)]',
      // 조건부 클래스
      isActive && 'bg-[var(--button-active-background)]',
      isError && 'border border-[var(--input-color-border-error)]',
      isDisabled && 'opacity-50 cursor-not-allowed',
      'hover:bg-[var(--button-primary-background-deep)]',
      'md:px-6'
    ]"
    :disabled="isDisabled"
  >
    {{ label }}
  </button>
</template>
```

### 4.5 :style 사용 가이드
```vue
<!-- 동적으로 계산된 수치, 실시간 애니메이션 등 -->
<!-- 참고: __tokens-light.css, 컴포넌트 내 computed -->
<template>
  <div
    class="absolute bg-[var(--bg-surface)] shadow-lg"
    :style="{
      width: `${dynamicWidth}px`,
      top: `${positionTop}px`,
      left: `${positionLeft}px`,
      zIndex: zIndex,
      transform: `scale(${scale})`,
      backgroundColor: customColor // 사용자 입력값
    }"
  >
    {{ content }}
  </div>
</template>
```

### 4.6 SCSS(Sass) 활용 가이드
```scss
// 반복/중첩/미디어쿼리/토큰 연동 등 복잡한 스타일
// 참고: style.css, __tokens-light.css
.button {
  @apply inline-flex items-center font-semibold transition-all;
  border-radius: var(--button-radius, 8px);
  background-color: var(--button-primary-background);
  color: var(--button-primary-text);
  &:hover:not(:disabled) {
    background-color: var(--button-primary-background-deep);
  }
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  @media (min-width: 768px) {
    padding-left: 24px;
    padding-right: 24px;
  }
}
```

---

## 5. 성능 최적화 가이드

### 5.1 정적 CSS 변수 vs 동적 CSS 변수

#### ✅ 정적 CSS 변수 (권장)
```vue
<!-- 성능 우수: CSS 클래스로 처리 -->
<button class="bg-[var(--button-primary-background)] text-[var(--button-primary-text)]">
  버튼
</button>
```

#### ⚠️ 동적 CSS 변수 (조건부 변경 시만)
```vue
<!-- 성능 오버헤드: JavaScript 실행 필요 -->
<button :style="buttonStyle">
  버튼
</button>
```

### 5.2 성능 비교표

| 방식 | 성능 | 번들 크기 | 캐싱 | 가독성 | 사용 시기 |
|------|------|-----------|------|--------|-----------|
| 정적 CSS 변수 | ✅ 우수 | ✅ 최적화 | ✅ 브라우저 캐싱 | ✅ 직관적 | 단순 색상/값 |
| 동적 CSS 변수 | ⚠️ 오버헤드 | ⚠️ JavaScript | ⚠️ 런타임 | ⚠️ 복잡 | 조건부 변경 |

---

## 6. 컴포넌트/유틸리티/반응형 패턴 예시 (디자인 토큰 활용)

### 6.1 컴포넌트 스타일 패턴
```vue
<!-- 참고: tailwind.config.cjs, __tokens-light.css -->
<script setup lang="ts">
import { computed } from 'vue'
// ...생략 (BaseCard.vue 예시)...
</script>
<template>
  <div :class="cardClasses">
    <slot />
  </div>
</template>
```

### 6.2 유틸리티 클래스 컴포넌트
```css
/* 참고: tailwind.config.cjs, __tokens-light.css */
@layer components {
  .btn {
    @apply inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed;
    background-color: var(--button-primary-background);
    color: var(--button-primary-text);
  }
  .btn-primary {
    @apply btn hover:bg-[var(--button-primary-background-deep)] focus:ring-[var(--button-primary-border)] active:bg-[var(--button-primary-background-deep)];
  }
  .btn-outline {
    @apply btn border-2 border-[var(--button-outline-border)] bg-transparent text-[var(--button-outline-text)] hover:bg-[var(--button-outline-background)];
  }
  /* ... 기타 버튼, 인풋, 카드, 배지 등도 동일하게 디자인 토큰 활용 ... */
}
```

### 6.3 반응형 디자인 패턴
```vue
<!-- 참고: tailwind.config.cjs, __tokens-light.css -->
<script setup lang="ts">
import { computed } from 'vue'
// ...생략 (ResponsiveLayout.vue 예시)...
</script>
<template>
  <div :class="layoutClasses">
    <!-- ... -->
  </div>
</template>
```

---

## 7. 실무 주의점 및 결론

### 7.1 성능 최적화 원칙
- **단순 색상/값 → 정적 CSS 변수 (Tailwind arbitrary value)**
- **조건부 변경 → 동적 CSS 변수 (:style)**
- **:style 남용 금지**: 정말 필요한 경우에만 사용

### 7.2 코드 품질 원칙
- **SCSS와 Tailwind 혼용 시 네이밍/우선순위 관리**: SCSS에서 @apply 사용 시 Tailwind 버전과 호환성 체크
- **디자인 토큰 변경 시 빌드/적용 프로세스 명확화**: CSS 변수 자동화(Style Dictionary 등)와 연동
- **팀 내 코드리뷰/컨벤션 공유**: 예시 코드와 함께 팀 내 가이드로 문서화

### 7.3 최종 권장사항
- **색상/테마/폰트 등 디자인 토큰 → 정적 CSS 변수 (Tailwind arbitrary value)**
- **레이아웃/간격/반응형/상태 → Tailwind 클래스**
- **조건부 색상 변경 → computed로 :style 처리**
- **복잡한 구조/반복/미디어쿼리 → SCSS 적극 활용**
- **디자인 토큰 → CSS 변수로 관리, class에서 arbitrary value로 활용**
