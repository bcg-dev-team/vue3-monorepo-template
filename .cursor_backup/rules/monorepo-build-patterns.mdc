---
description: 
globs: 
alwaysApply: false
---
# Vue 3 모노레포 빌드 패턴

## 핵심 원칙

### 1. 타입 참조 경로 통일
모노레포에서 패키지 간 타입 참조 시 반드시 빌드 산출물(`dist`)을 참조해야 합니다.

```json
// ❌ 잘못된 설정 (소스 직접 참조)
"@template/types": ["packages/types/src"]

// ✅ 올바른 설정 (빌드 산출물 참조)  
"@template/types": ["packages/types/dist"]
```

### 2. 빌드 산출물 분리
- `src` 폴더: 소스 코드만
- `dist` 폴더: 빌드 산출물만
- 중복 파일 정리 필수

### 3. 패키지 진입점 명확화
```json
{
  "main": "dist/index.js",
  "module": "dist/index.mjs",
  "types": "dist/index.d.ts",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "default": "./dist/index.js"
    }
  }
}
```

## 필수 설정

### UI 패키지 (Vite 기반)
```typescript
// vite.config.ts
import dts from 'vite-plugin-dts';

export default defineConfig({
  plugins: [
    vue(),
    dts({
      insertTypesEntry: true,
      rollupTypes: true,
    }),
  ],
  build: {
    lib: {
      entry: resolve(__dirname, 'src/index.ts'),
      name: 'TemplateUI',
      fileName: 'index',
      formats: ['es', 'cjs'],
    },
  },
});
```

### 타입 패키지 (TypeScript 기반)
```json
{
  "compilerOptions": {
    "outDir": "./dist",
    "declarationDir": "./dist",
    "declaration": true,
    "declarationMap": true
  }
}
```

## 빌드 순서
1. `@template/types` (타입 정의)
2. `@template/utils` (유틸리티)
3. `@template/api` (API 클라이언트)
4. `@template/ui` (UI 컴포넌트)
5. `apps/desktop` (데스크톱 앱)
6. `apps/mobile` (모바일 앱)

## 문제 해결 패턴

### 타입 충돌 (TS6059, TS6307)
```bash
# 1. 빌드 산출물 정리
rm packages/[package-name]/src/*.d.ts
rm packages/[package-name]/src/*.js
rm packages/[package-name]/src/*.js.map

# 2. 클린 빌드
pnpm --filter @package-name run clean
pnpm --filter @package-name run build

# 3. 워크스페이스 캐시 정리
pnpm install
```

### UI 패키지 진입점 문제
```bash
# vite-plugin-dts 설치
pnpm add -D vite-plugin-dts

# 빌드 재시도
pnpm --filter @template/ui run build
```

### 타입 선언 파일 누락 (TS2307)
```json
// tsconfig.json에 추가
{
  "compilerOptions": {
    "declarationDir": "./dist"
  }
}
```

## 예방 조치

### .gitignore 설정
```
# 빌드 산출물
dist/
*.d.ts
*.js
*.js.map
*.d.ts.map

# 테스트 파일 (src 내)
src/**/__tests__/
```

### 빌드 전 정리 스크립트
```json
{
  "scripts": {
    "clean": "pnpm -r run clean",
    "prebuild": "pnpm clean"
  }
}
```

## 자주 발생하는 오류 코드
- `TS6059`: 파일이 모듈이 아님 (타입 충돌)
- `TS6307`: 프로젝트 참조로 인한 파일 중복 포함  
- `TS2307`: 모듈을 찾을 수 없음 (타입 선언 파일 누락)
- `TS2554`: 인자 개수 불일치 (코드 로직 오류)
- `TS7053`: 암시적 any 타입 (타입 정의 누락)
