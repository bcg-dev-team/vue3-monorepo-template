# 하이브리드 스타일 방식 가이드

## 개요
이 프로젝트에서는 Tailwind CSS와 디자인 토큰을 조합한 하이브리드 스타일 방식을 사용합니다. 이는 빠른 개발과 일관된 디자인 시스템을 동시에 달성하기 위한 접근법입니다.

## 기본 원칙

### 1. 디자인 토큰 우선
- **색상**: CSS 변수(var())를 사용하여 디자인 토큰 접근 (예: var(--color-primary), var(--color-icon-on))
- **간격**: 디자인 토큰의 spacing 값 사용
- **타이포그래피**: 디자인 토큰의 typography 값 사용
- **테두리**: 디자인 토큰의 border 값 사용

### 2. Tailwind CSS 활용
- **레이아웃**: flex, grid, position 등 레이아웃 관련 클래스
- **반응형**: sm:, md:, lg: 등 반응형 유틸리티
- **상태**: hover:, focus:, active: 등 상태 관련 클래스
- **애니메이션**: transition, animate 등 애니메이션 클래스

### 3. CSS 클래스 방식 및 스타일 관리
- **미리 정의된 클래스**: 동적 CSS 변수 클래스 생성 대신 미리 정의된 클래스 사용
- **SCSS 파일 분리**: 컴포넌트별로 별도의 SCSS 파일 생성
- **클래스 매핑**: Vue 컴포넌트에서 variant별 클래스 매핑 패턴 사용

> **참고**: 자세한 CSS 클래스 방식 가이드는 [Tailwind CSS 베스트 프랙티스](./tailwindcss-best-practices.mdc)를 참조하세요.

## CSS 클래스 방식 가이드

### 핵심 원칙
- **미리 정의된 클래스 방식 사용**: 개발자 도구 가독성을 위해 동적 CSS 변수 클래스 대신 미리 정의된 클래스 사용
- **SCSS 파일 분리**: 컴포넌트별로 별도의 SCSS 파일 생성
- **클래스 매핑 패턴**: Vue 컴포넌트에서 variant별 클래스 매핑 사용

### 간단한 예시
```vue
<!-- ❌ 피해야 할 방식 -->
<button :class="`bg-[var(--button-${variant}-background)]`">

<!-- ✅ 권장 방식 -->
<button :class="`btn-${variant}`">
```

```scss
/* BaseButton.scss */
.btn-primary {
  background-color: var(--button-primary-background);
  color: var(--button-primary-text);
}
```

## 스타일 적용 순서

### 1. 디자인 토큰 클래스 (우선)
```vue
<!-- 올바른 예시 -->
<div class="bg-primary text-on-primary p-spacing-md rounded-radius-lg">
  <!-- 디자인 토큰에서 정의된 값들 -->
</div>

<!-- 잘못된 예시 -->
<div class="bg-yellow-400 text-black p-4 rounded-lg">
  <!-- 하드코딩된 값들 -->
</div>

<!-- 잘못된 예시 (CSS 변수 미사용) -->
<div class="bg-primary text-on-primary p-spacing-md rounded-radius-lg">
  <!-- Tailwind 클래스로 디자인 토큰 접근 -->
</div>
```

### 2. Tailwind 유틸리티 클래스 (보조)
```vue
<div class="flex items-center justify-center p-spacing-md rounded-radius-lg 
            transition-colors duration-200"
     style="background-color: var(--color-primary); color: var(--color-text-on-primary)">
  <!-- CSS 변수로 디자인 토큰 + Tailwind 유틸리티 조합 -->
</div>
```

## 색상 사용 가이드

### 디자인 토큰 색상
```vue
<!-- 올바른 색상 사용 -->
<div style="background-color: var(--color-primary)">Primary 배경</div>
<div style="background-color: var(--color-icon-on)">아이콘 활성 상태</div>
<div style="background-color: var(--color-bg-surface-muted)">Muted 표면</div>
<div style="color: var(--color-text-on-primary)">Primary 위의 텍스트</div>
<div style="color: var(--color-text-on-surface)">Surface 위의 텍스트</div>
```

### 잘못된 색상 사용
```vue
<!-- 피해야 할 사용법 -->
<div class="bg-yellow-400">하드코딩된 색상</div>
<div class="bg-gray-200">일반 Tailwind 색상</div>
<div class="text-black">하드코딩된 텍스트 색상</div>
```

## 간격 사용 가이드

### 디자인 토큰 간격
```vue
<!-- 올바른 간격 사용 -->
<div class="p-spacing-sm">작은 패딩</div>
<div class="p-spacing-md">중간 패딩</div>
<div class="p-spacing-lg">큰 패딩</div>
<div class="gap-spacing-xs">작은 간격</div>
<div class="gap-spacing-sm">중간 간격</div>
```

### Tailwind 간격 (레이아웃용)
```vue
<!-- 레이아웃 조정용으로만 사용 -->
<div class="flex gap-2 items-center">
  <!-- gap-2는 아이템 간의 미세 조정용 -->
</div>
```

## 컴포넌트별 스타일 패턴

> **참고**: 자세한 컴포넌트 스타일 패턴은 [Tailwind CSS 베스트 프랙티스](./tailwindcss-best-practices.mdc)를 참조하세요.

### 버튼 컴포넌트 (개선된 방식)
```vue
<script setup lang="ts">
import './BaseButton.scss';

const variantClasses = {
  primary: 'btn-primary',
  outline: 'btn-outline',
  secondary: 'btn-secondary',
};
</script>

<template>
  <button 
    :class="[
      'inline-flex items-center justify-center font-medium transition-all duration-200',
      variantClasses[variant] || 'btn-primary'
    ]"
  >
    <slot />
  </button>
</template>
```

### 카드 컴포넌트 (개선된 방식)
```vue
<script setup lang="ts">
import './BaseCard.scss';

const variantClasses = {
  default: 'card-default',
  elevated: 'card-elevated',
  outlined: 'card-outlined',
};
</script>

<template>
  <div 
    :class="[
      'transition-all duration-200',
      variantClasses[variant] || 'card-default'
    ]"
  >
    <slot />
  </div>
</template>
```

### 입력 필드 컴포넌트 (개선된 방식)
```vue
<script setup lang="ts">
import './BaseInput.scss';
</script>

<template>
  <input 
    :class="[
      'w-full transition-all duration-200',
      'input-field'
    ]"
  />
</template>
```

## 반응형 디자인

### 디자인 토큰 + Tailwind 반응형
```vue
<template>
  <div class="p-spacing-sm sm:p-spacing-md lg:p-spacing-lg">
    <!-- 화면 크기에 따른 패딩 조정 -->
  </div>
  
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-spacing-sm">
    <!-- 반응형 그리드 레이아웃 -->
  </div>
</template>
```

## 상태 관리

### 호버 상태
```vue
<template>
  <button class="btn-primary">
    <!-- SCSS 파일에서 hover 상태 정의 -->
  </button>
</template>
```

### 포커스 상태
```vue
<template>
  <input class="input-field">
    <!-- SCSS 파일에서 focus 상태 정의 -->
  </input>
</template>
```

## 애니메이션

### Tailwind 애니메이션 활용
```vue
<template>
  <div class="transition-all duration-200 ease-in-out hover:scale-105">
    <!-- 디자인 토큰 색상 + Tailwind 애니메이션 -->
  </div>
</template>
```

## 디버깅 및 검증

### 디자인 토큰 확인
```bash
# 디자인 토큰이 올바르게 적용되었는지 확인
npm run storybook
# 또는
pnpm storybook
```

### 스타일 검증 체크리스트
- [ ] 색상이 디자인 토큰에서 정의된 값인가?
- [ ] 간격이 디자인 토큰의 spacing 값인가?
- [ ] 타이포그래피가 디자인 토큰의 typography 값인가?
- [ ] 테두리가 디자인 토큰의 border 값인가?
- [ ] 레이아웃과 반응형이 Tailwind로 구현되었는가?
- [ ] 미리 정의된 클래스 방식을 사용하고 있는가?
- [ ] 컴포넌트별 SCSS 파일이 분리되어 있는가?
- [ ] 동적 CSS 변수 클래스 생성을 지양하고 있는가?

## 마이그레이션 가이드

### 기존 코드 수정
```vue
<!-- 수정 전 -->
<div class="bg-yellow-400 p-4 rounded-lg">

<!-- 수정 후 -->
<div class="card-primary">
```

### 단계별 마이그레이션
1. **색상 토큰화**: 하드코딩된 색상을 디자인 토큰으로 변경
2. **간격 토큰화**: 하드코딩된 간격을 디자인 토큰으로 변경
3. **타이포그래피 토큰화**: 폰트 크기와 두께를 디자인 토큰으로 변경
4. **테두리 토큰화**: 테두리 스타일을 디자인 토큰으로 변경
5. **클래스 방식 개선**: 동적 CSS 변수 클래스를 미리 정의된 클래스로 변경
6. **SCSS 파일 분리**: 컴포넌트별로 별도 SCSS 파일 생성

## 베스트 프랙티스

### DO (해야 할 것)
- 디자인 토큰을 우선적으로 사용
- Tailwind는 레이아웃과 반응형에 활용
- 일관된 네이밍 컨벤션 유지
- 컴포넌트별 스타일 패턴 정의
- 미리 정의된 클래스 방식 사용
- 컴포넌트별 SCSS 파일 분리
- 클래스 매핑 패턴 활용

### DON'T (하지 말아야 할 것)
- 하드코딩된 색상 사용
- 디자인 토큰과 충돌하는 Tailwind 클래스 사용
- 일관성 없는 스타일링
- 과도한 커스텀 CSS 작성
- 동적 CSS 변수 클래스 생성
- 인라인 스타일로 디자인 토큰 적용
description:
globs:
alwaysApply: false
---
