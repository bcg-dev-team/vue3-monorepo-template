---
description: 
globs: 
alwaysApply: false
---
---
rule_type: always
---

# 네이밍 컨벤션 베스트 프랙티스

## 기본 원칙

### 1. 일관성 (Consistency)
- 프로젝트 전체에서 동일한 네이밍 패턴 사용
- 팀 내 합의된 규칙 준수
- 기존 코드베이스와 일치

### 2. 명확성 (Clarity)
- 의도가 명확하게 드러나는 이름 사용
- 축약어 사용 지양 (일반적으로 알려진 것 제외)
- 맥락에 맞는 적절한 수준의 구체성

### 3. 간결성 (Conciseness)
- 불필요하게 긴 이름 지양
- 핵심 정보만 포함
- 중복 정보 제거

## 파일 및 디렉토리 네이밍

### 1. 파일명 규칙

#### Vue 컴포넌트
```
✅ 좋은 예시
- UserProfile.vue
- ProductCard.vue
- NavigationBar.vue
- UserProfileCard.vue

❌ 나쁜 예시
- user-profile.vue (kebab-case)
- userprofile.vue (camelCase)
- User_Profile.vue (snake_case)
```

#### TypeScript 파일
```
✅ 좋은 예시
- userService.ts
- apiClient.ts
- validationUtils.ts
- types.ts

❌ 나쁜 예시
- user-service.ts
- UserService.ts
- user_service.ts
```

#### 테스트 파일
```
✅ 좋은 예시
- UserProfile.test.ts
- userService.spec.ts
- validationUtils.test.ts

❌ 나쁜 예시
- test-user-profile.ts
- userProfileTest.ts
```

### 2. 디렉토리명 규칙

#### 일반 디렉토리
```
✅ 좋은 예시
- components/
- services/
- utils/
- types/
- views/
- stores/

❌ 나쁜 예시
- Components/
- SERVICES/
- utils-folder/
```

#### 기능별 디렉토리
```
✅ 좋은 예시
- user/
- product/
- order/
- auth/

❌ 나쁜 예시
- users/
- products/
- orders/
- authentication/
```

## 변수 및 함수 네이밍

### 1. 변수명 규칙

#### 일반 변수 (camelCase)
```typescript
✅ 좋은 예시
const userName = 'John';
const productList = [];
const isAuthenticated = true;
const maxRetryCount = 3;

❌ 나쁜 예시
const user_name = 'John';
const UserName = 'John';
const userName_ = 'John';
```

#### 상수 (UPPER_SNAKE_CASE)
```typescript
✅ 좋은 예시
const API_BASE_URL = 'https://api.example.com';
const MAX_FILE_SIZE = 1024 * 1024;
const DEFAULT_TIMEOUT = 5000;

❌ 나쁜 예시
const apiBaseUrl = 'https://api.example.com';
const maxFileSize = 1024 * 1024;
const defaultTimeout = 5000;
```

#### Boolean 변수
```typescript
✅ 좋은 예시
const isLoading = false;
const hasPermission = true;
const canEdit = false;
const isVisible = true;

❌ 나쁜 예시
const loading = false;
const permission = true;
const edit = false;
const visible = true;
```

### 2. 함수명 규칙

#### 일반 함수 (camelCase)
```typescript
✅ 좋은 예시
function getUserById(id: string): User { }
function validateEmail(email: string): boolean { }
function formatCurrency(amount: number): string { }
function handleSubmit(event: Event): void { }

❌ 나쁜 예시
function get_user_by_id(id: string): User { }
function GetUserById(id: string): User { }
function getUserById_(id: string): User { }
```

#### 비동기 함수
```typescript
✅ 좋은 예시
async function fetchUserData(id: string): Promise<User> { }
async function saveUserProfile(user: User): Promise<void> { }
async function uploadFile(file: File): Promise<string> { }

❌ 나쁜 예시
async function getUserData(id: string): Promise<User> { }
async function saveProfile(user: User): Promise<void> { }
async function upload(file: File): Promise<string> { }
```

#### 이벤트 핸들러
```typescript
✅ 좋은 예시
function handleClick(event: MouseEvent): void { }
function handleInputChange(event: InputEvent): void { }
function handleFormSubmit(event: SubmitEvent): void { }

❌ 나쁜 예시
function onClick(event: MouseEvent): void { }
function inputChange(event: InputEvent): void { }
function submit(event: SubmitEvent): void { }
```

## 클래스 및 인터페이스 네이밍

### 1. 클래스명 (PascalCase)
```typescript
✅ 좋은 예시
class UserService { }
class ApiClient { }
class ValidationUtils { }
class ProductRepository { }

❌ 나쁜 예시
class userService { }
class api_client { }
class validationUtils { }
```

### 2. 인터페이스명 (PascalCase)
```typescript
✅ 좋은 예시
interface UserProfile { }
interface ApiResponse<T> { }
interface ValidationRule { }
interface ProductConfig { }

❌ 나쁜 예시
interface userProfile { }
interface api_response { }
interface validationRule { }
```

### 3. 타입명 (PascalCase)
```typescript
✅ 좋은 예시
type UserStatus = 'active' | 'inactive' | 'pending';
type ApiError = { code: string; message: string };
type ValidationResult = { isValid: boolean; errors: string[] };

❌ 나쁜 예시
type userStatus = 'active' | 'inactive' | 'pending';
type api_error = { code: string; message: string };
```

## Vue.js 특화 네이밍

### 1. 컴포넌트명 (PascalCase)
```vue
✅ 좋은 예시
<script setup lang="ts">
// 컴포넌트명: UserProfileCard
</script>

<template>
  <div class="user-profile-card">
    <!-- 컴포넌트 내용 -->
  </div>
</template>
```

### 2. Props 네이밍 (camelCase)
```vue
✅ 좋은 예시
<script setup lang="ts">
interface Props {
  userName: string;
  userAge: number;
  isActive: boolean;
  profileImage?: string;
}

const props = defineProps<Props>();
</script>
```

### 3. Emits 네이밍 (camelCase)
```vue
✅ 좋은 예시
<script setup lang="ts">
interface Emits {
  (e: 'update', user: User): void;
  (e: 'delete', userId: string): void;
  (e: 'submit', data: FormData): void;
}

const emit = defineEmits<Emits>();
</script>
```

### 4. CSS 클래스명 (kebab-case)
```vue
✅ 좋은 예시
<template>
  <div class="user-profile-card">
    <div class="profile-header">
      <img class="profile-image" :src="user.avatar" />
    </div>
    <div class="profile-content">
      <h3 class="user-name">{{ user.name }}</h3>
    </div>
  </div>
</template>

<style scoped>
.user-profile-card {
  /* 스타일 */
}

.profile-header {
  /* 스타일 */
}

.profile-image {
  /* 스타일 */
}
</style>
```

## 모노레포 특화 네이밍

### 1. 패키지명
```
✅ 좋은 예시
@template/types
@template/utils
@template/ui
@template/api
@template/desktop
@template/mobile

❌ 나쁜 예시
@template/Types
@template-utils
@template_ui
```

### 2. 워크스페이스 구조
```
✅ 좋은 예시
packages/
  types/
  utils/
  ui/
  api/
apps/
  desktop/
  mobile/
shared/
  config/
  scripts/

❌ 나쁜 예시
packages/
  Types/
  Utils/
  UI/
apps/
  Desktop/
  Mobile/
```

## 특수 케이스

### 1. 약어 및 축약어
```typescript
✅ 좋은 예시 (일반적으로 알려진 것들)
const id = 'user-123';
const url = 'https://example.com';
const api = new ApiClient();
const ui = new UIManager();

❌ 나쁜 예시 (모호한 축약어)
const usr = 'user';
const prd = 'product';
const cfg = 'config';
```

### 2. 숫자 접두사/접미사
```typescript
✅ 좋은 예시
const user1 = new User();
const user2 = new User();
const apiV1 = new ApiClient();
const apiV2 = new ApiClient();

❌ 나쁜 예시
const user_1 = new User();
const user_2 = new User();
const api_v1 = new ApiClient();
```

### 3. 언더스코어 사용
```typescript
✅ 좋은 예시 (private 멤버)
class UserService {
  private _cache = new Map();
  private _apiClient: ApiClient;
}

❌ 나쁜 예시 (일반 변수)
const user_name = 'John';
const product_list = [];
```

## 네이밍 체크리스트

### 작성 전 확인사항
- [ ] 프로젝트의 기존 네이밍 패턴과 일치하는가?
- [ ] 의도가 명확하게 드러나는가?
- [ ] 불필요한 축약어나 모호한 표현은 없는가?
- [ ] 적절한 케이스 스타일을 사용했는가?

### 작성 후 확인사항
- [ ] 일관성 있는 네이밍을 유지했는가?
- [ ] 다른 개발자가 이해하기 쉬운가?
- [ ] 검색하기 쉬운가?
- [ ] 리팩토링 시 혼란을 주지 않는가?

## 자동화 도구

### ESLint 규칙
```javascript
// eslint.config.js
rules: {
  // 네이밍 컨벤션 강제
  'camelcase': ['error', { properties: 'never' }],
  'no-underscore-dangle': 'error',
  
  // Vue 특화 규칙
  'vue/component-name-in-template-casing': ['error', 'PascalCase'],
  'vue/prop-name-casing': ['error', 'camelCase'],
  'vue/attribute-hyphenation': ['error', 'always'],
}
```

### Prettier 설정
```json
{
  "singleQuote": true,
  "trailingComma": "es5",
  "printWidth": 100,
  "tabWidth": 2
}
```

## 마이그레이션 가이드

### 기존 코드 정리
1. **일관성 점검**: 프로젝트 전체의 네이밍 패턴 분석
2. **우선순위 설정**: 가장 많이 사용되는 패턴부터 정리
3. **점진적 변경**: 한 번에 모든 것을 바꾸지 말고 단계적으로 진행
4. **팀 합의**: 변경 사항에 대한 팀 내 합의 및 문서화

### 팀 협업
1. **코드 리뷰**: 네이밍 컨벤션 준수 여부 검토
2. **문서화**: 팀 내 네이밍 가이드라인 공유
3. **정기 점검**: 주기적인 네이밍 컨벤션 점검 및 개선
