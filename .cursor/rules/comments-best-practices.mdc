---
description: 
globs: 
alwaysApply: false
---
# JSDoc 주석 작성 규칙

## 기본 원칙

### 1. 주석 작성 언어
- **기본**: 한국어로 작성
- **예외**: 외부 협업, 오픈소스, 국제 표준 라이브러리 등은 영어로 작성 가능

### 2. JSDoc 스타일 (권장)

#### 함수 주석
```typescript
/**
 * 사용자 정보를 업데이트하는 함수
 * @param userId - 사용자 ID
 * @param userData - 업데이트할 사용자 데이터
 * @returns 업데이트된 사용자 정보
 * @throws {ValidationError} 유효하지 않은 데이터인 경우
 */
async function updateUser(userId: string, userData: Partial<User>): Promise<User> {
  // 구현...
}
```

#### 클래스 주석
```typescript
/**
 * 사용자 관리 클래스
 * 사용자 CRUD 작업을 담당합니다.
 */
class UserManager {
  /**
   * 사용자 생성
   * @param userData - 생성할 사용자 데이터
   * @returns 생성된 사용자 정보
   */
  async createUser(userData: CreateUserRequest): Promise<User> {
    // 구현...
  }
}
```

#### 인터페이스 주석
```typescript
/**
 * API 응답 타입 정의
 * @template T - 응답 데이터의 타입
 */
interface ApiResponse<T = unknown> {
  success: boolean;
  data?: T;
  message?: string;
  error?: string;
  statusCode: number;
}
```

#### Vue 컴포넌트 주석
```vue
<script setup lang="ts">
/**
 * 사용자 프로필을 표시하는 컴포넌트
 * 
 * @props user - 표시할 사용자 정보
 * @emits update - 사용자 정보 업데이트 시 발생
 */
interface Props {
  user: User;
}

interface Emits {
  (e: 'update', user: User): void;
}

const props = defineProps<Props>();
const emit = defineEmits<Emits>();
</script>
```

## JSDoc 태그 규칙

### 필수 태그
- `@param` - 매개변수 설명
- `@returns` - 반환값 설명
- `@throws` - 예외 상황 설명

### 선택 태그
- `@template` - 제네릭 타입 설명
- `@example` - 사용 예시
- `@deprecated` - 사용 중단 예정
- `@since` - 도입된 버전
- `@author` - 작성자

### 태그 작성 순서
1. 함수/클래스 설명
2. `@param` (매개변수 순서대로)
3. `@returns`
4. `@throws`
5. 기타 태그들

## 작성 가이드

### 언제 JSDoc을 작성할까?
- **공개 API**: 외부에서 사용할 함수, 클래스, 인터페이스
- **복잡한 로직**: 비즈니스 로직이 복잡한 함수
- **유틸리티 함수**: 재사용 가능한 헬퍼 함수
- **Vue 컴포넌트**: Props와 Emits가 있는 컴포넌트

### 작성하지 말아야 하는 경우
- **private 함수**: 내부에서만 사용하는 간단한 함수
- **명확한 코드**: 함수명만으로도 의도가 명확한 경우
- **getter/setter**: 단순한 접근자 메서드
