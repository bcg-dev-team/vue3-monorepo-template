---
description: 
globs: 
alwaysApply: false
---
# Vue 3 베스트 프랙티스

## Composition API 사용
- Composition API를 사용하여 더 나은 상태 관리와 재사용성을 구현하세요.
- `<script setup>`을 사용하여 더 깔끔하고 간결한 컴포넌트 코드를 작성하세요.
- 컴포넌트의 적절한 prop 검증과 기본값을 보장하세요.
- 효율적인 네비게이션과 라우트의 지연 로딩을 위해 Vue Router를 활용하세요.

## 컴포넌트 설계 원칙
- **단일 책임 원칙**: 각 컴포넌트는 하나의 명확한 책임을 가져야 합니다.
- **재사용성**: 공통 컴포넌트는 packages/ui에 배치하고 재사용 가능하게 설계하세요.
- **Props 검증**: 모든 props에 대해 TypeScript 타입과 기본값을 정의하세요.
- **이벤트 처리**: emit을 사용하여 부모 컴포넌트와 통신하세요.

## 성능 최적화
- **Virtual Scrolling**: 대용량 데이터셋에는 vue-virtual-scroller를 사용하세요.
- **메모이제이션**: computed와 watch를 적절히 사용하여 불필요한 재계산을 방지하세요.
- **지연 로딩**: 라우트와 컴포넌트의 지연 로딩을 구현하세요.
- **번들 최적화**: 코드 분할과 트리 셰이킹을 활용하세요.

## 모노레포 구조 준수
- **공통 컴포넌트**: packages/ui에 배치
- **비즈니스 로직**: packages/utils에 배치
- **API 통신**: packages/api에 배치
- **타입 정의**: packages/types에 배치

## 예시 코드 패턴

```vue
<script setup lang="ts">
import { computed, ref, onMounted, onUnmounted } from 'vue'
import type { User } from '@template/types'

// Props 정의
interface Props {
  userId: string
  showDetails?: boolean
}

const props = withDefaults(defineProps<Props>(), {
  showDetails: false
})

// Emits 정의
interface Emits {
  (e: 'user-selected', user: User): void
  (e: 'error', error: Error): void
}

const emit = defineEmits<Emits>()

// 반응형 상태
const user = ref<User | null>(null)
const loading = ref(false)
const error = ref<string | null>(null)

// Computed 속성
const displayName = computed(() => {
  return user.value ? `${user.value.firstName} ${user.value.lastName}` : ''
})

// 메서드
const fetchUser = async () => {
  try {
    loading.value = true
    // API 호출 로직
    emit('user-selected', user.value!)
  } catch (err) {
    error.value = err instanceof Error ? err.message : 'Unknown error'
    emit('error', err as Error)
  } finally {
    loading.value = false
  }
}

// 생명주기 훅
onMounted(() => {
  fetchUser()
})

onUnmounted(() => {
  // 정리 작업
})
</script>

<template>
  <div class="user-profile">
    <div v-if="loading" class="loading">로딩 중...</div>
    <div v-else-if="error" class="error">{{ error }}</div>
    <div v-else-if="user" class="user-info">
      <h3>{{ displayName }}</h3>
      <div v-if="showDetails" class="details">
        <!-- 상세 정보 -->
      </div>
    </div>
  </div>
</template>
