
# Pinia 베스트 프랙티스

## 상태 관리 원칙
- prop drilling을 피하고 전역 상태를 관리하기 위해 stores를 사용하세요.
- 더 나은 유지보수를 위해 state, getters, actions를 명확하게 정의하세요.
- state와 actions에 대한 엄격한 타입 정의를 구현하세요.
- store 내에서 관심사를 분리하기 위해 모듈을 사용하세요.

## 상태 관리 선택 기준

### Pinia 사용 시기
- 여러 컴포넌트에서 **공유**되는 상태
- 페이지 간 **지속**되어야 하는 상태
- **복잡한 상태 로직**이 있는 경우
- **서버 상태**와 연동되는 경우
- **전역 설정**이나 **사용자 설정** 관리

### Local State 사용 시기
- **단일 컴포넌트**에서만 사용되는 상태
- 컴포넌트 **생명주기와 연관**된 임시 상태
- **UI 상태** (hover, focus, loading, form validation 등)
- **단순한 상태 관리**
- **성능 최적화**가 필요한 경우

### 예시
```typescript
// ✅ Pinia 사용: 전역 상태
const useUserStore = defineStore('user', () => {
  const currentUser = ref<User | null>(null)
  const isAuthenticated = computed(() => !!currentUser.value)
  return { currentUser, isAuthenticated }
})

// ✅ Local State 사용: UI 상태
const useForm = () => {
  const isSubmitting = ref(false)
  const errors = ref<string[]>([])
  return { isSubmitting, errors }
}
```

## 모노레포 Pinia 구조
- **도메인별 스토어**: 각 도메인에 특화된 스토어를 생성하세요.
- **공통 스토어**: packages/utils에 공통 스토어 유틸리티를 배치하세요.
- **타입 정의**: packages/types에 스토어 타입을 정의하세요.
- **실시간 데이터**: WebSocket과 연동된 실시간 스토어를 구현하세요.

## 성능 최적화
- **상태 정규화**: 중복 데이터를 피하고 정규화된 상태 구조를 사용하세요.
- **선택적 구독**: 필요한 상태만 구독하여 불필요한 리렌더링을 방지하세요.
- **메모이제이션**: 복잡한 계산에는 getter 메모이제이션을 활용하세요.
- **실시간 최적화**: WebSocket 데이터 배칭과 메모리 관리를 구현하세요.

## 예시 스토어 패턴

```typescript
// packages/types/stores.ts
export interface BaseState {
  loading: boolean
  error: string | null
  lastUpdated: Date | null
}

export interface AsyncState<T> extends BaseState {
  data: T | null
}

export interface PaginatedState<T> extends AsyncState<T[]> {
  pagination: {
    page: number
    limit: number
    total: number
    totalPages: number
  }
}

// packages/utils/stores/base-store.ts
import { defineStore } from 'pinia'
import type { BaseState } from '@template/types'

export const createBaseStore = <T extends BaseState>(
  id: string,
  initialState: T
) => {
  return defineStore(id, {
    state: (): T => ({
      ...initialState,
    }),
    getters: {
      isLoading: (state) => state.loading,
      hasError: (state) => state.error !== null,
      errorMessage: (state) => state.error,
      isStale: (state) => {
        if (!state.lastUpdated) return true
        return Date.now() - state.lastUpdated.getTime() > 5 * 60 * 1000 // 5분
      },
    },
    actions: {
      setLoading(loading: boolean) {
        this.loading = loading
      },
      setError(error: string | null) {
        this.error = error
      },
      updateTimestamp() {
        this.lastUpdated = new Date()
      },
      reset() {
        this.loading = false
        this.error = null
        this.lastUpdated = null
      },
    },
  })
}

// apps/desktop/stores/user-store.ts
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import type { User, CreateUserRequest, UpdateUserRequest } from '@template/types'
import { userApi } from '@template/api'

interface UserState {
  users: User[]
  currentUser: User | null
  selectedUserIds: string[]
  filters: {
    role: string | null
    isActive: boolean | null
    search: string
  }
  pagination: {
    page: number
    limit: number
    total: number
    totalPages: number
  }
  loading: boolean
  error: string | null
  lastUpdated: Date | null
}

export const useUserStore = defineStore('user', () => {
  // State
  const state = ref<UserState>({
    users: [],
    currentUser: null,
    selectedUserIds: [],
    filters: {
      role: null,
      isActive: null,
      search: '',
    },
    pagination: {
      page: 1,
      limit: 20,
      total: 0,
      totalPages: 0,
    },
    loading: false,
    error: null,
    lastUpdated: null,
  })

  // Getters
  const isLoading = computed(() => state.value.loading)
  const hasError = computed(() => state.value.error !== null)
  const errorMessage = computed(() => state.value.error)
  
  const filteredUsers = computed(() => {
    let users = state.value.users

    if (state.value.filters.role) {
      users = users.filter(user => user.role === state.value.filters.role)
    }

    if (state.value.filters.isActive !== null) {
      users = users.filter(user => user.isActive === state.value.filters.isActive)
    }

    if (state.value.filters.search) {
      const search = state.value.filters.search.toLowerCase()
      users = users.filter(user => 
        user.firstName.toLowerCase().includes(search) ||
        user.lastName.toLowerCase().includes(search) ||
        user.email.toLowerCase().includes(search)
      )
    }

    return users
  })

  const selectedUsers = computed(() => 
    state.value.users.filter(user => 
      state.value.selectedUserIds.includes(user.id)
    )
  )

  const hasSelection = computed(() => state.value.selectedUserIds.length > 0)

  // Actions
  const setLoading = (loading: boolean) => {
    state.value.loading = loading
  }

  const setError = (error: string | null) => {
    state.value.error = error
  }

  const updateTimestamp = () => {
    state.value.lastUpdated = new Date()
  }

  const fetchUsers = async (page = 1, limit = 20) => {
    try {
      setLoading(true)
      setError(null)
      
      const response = await userApi.getUsers({ page, limit })
      state.value.users = response.data
      state.value.pagination = response.pagination
      updateTimestamp()
    } catch (error) {
      setError(error instanceof Error ? error.message : '사용자 목록을 불러오는데 실패했습니다.')
      throw error
    } finally {
      setLoading(false)
    }
  }

  const createUser = async (userData: CreateUserRequest) => {
    try {
      setLoading(true)
      setError(null)
      
      const newUser = await userApi.createUser(userData)
      state.value.users.unshift(newUser)
      state.value.pagination.total += 1
      updateTimestamp()
      
      return newUser
    } catch (error) {
      setError(error instanceof Error ? error.message : '사용자 생성에 실패했습니다.')
      throw error
    } finally {
      setLoading(false)
    }
  }

  const updateUser = async (id: string, userData: UpdateUserRequest) => {
    try {
      setLoading(true)
      setError(null)
      
      const updatedUser = await userApi.updateUser(id, userData)
      const index = state.value.users.findIndex(user => user.id === id)
      if (index !== -1) {
        state.value.users[index] = updatedUser
      }
      updateTimestamp()
      
      return updatedUser
    } catch (error) {
      setError(error instanceof Error ? error.message : '사용자 수정에 실패했습니다.')
      throw error
    } finally {
      setLoading(false)
    }
  }

  const deleteUser = async (id: string) => {
    try {
      setLoading(true)
      setError(null)
      
      await userApi.deleteUser(id)
      state.value.users = state.value.users.filter(user => user.id !== id)
      state.value.pagination.total -= 1
      updateTimestamp()
    } catch (error) {
      setError(error instanceof Error ? error.message : '사용자 삭제에 실패했습니다.')
      throw error
    } finally {
      setLoading(false)
    }
  }

  const setCurrentUser = (user: User | null) => {
    state.value.currentUser = user
  }

  const toggleUserSelection = (userId: string) => {
    const index = state.value.selectedUserIds.indexOf(userId)
    if (index === -1) {
      state.value.selectedUserIds.push(userId)
    } else {
      state.value.selectedUserIds.splice(index, 1)
    }
  }

  const clearSelection = () => {
    state.value.selectedUserIds = []
  }

  const setFilters = (filters: Partial<UserState['filters']>) => {
    state.value.filters = { ...state.value.filters, ...filters }
  }

  const reset = () => {
    state.value = {
      users: [],
      currentUser: null,
      selectedUserIds: [],
      filters: {
        role: null,
        isActive: null,
        search: '',
      },
      pagination: {
        page: 1,
        limit: 20,
        total: 0,
        totalPages: 0,
      },
      loading: false,
      error: null,
      lastUpdated: null,
    }
  }

  return {
    // State
    state: readonly(state),
    
    // Getters
    isLoading,
    hasError,
    errorMessage,
    filteredUsers,
    selectedUsers,
    hasSelection,
    
    // Actions
    fetchUsers,
    createUser,
    updateUser,
    deleteUser,
    setCurrentUser,
    toggleUserSelection,
    clearSelection,
    setFilters,
    reset,
  }
})
```

## 실시간 데이터 스토어

```typescript
// packages/utils/stores/realtime-store.ts
import { defineStore } from 'pinia'
import { ref, onUnmounted } from 'vue'
import type { WebSocketMessage } from '@template/types'

export const createRealtimeStore = <T>(
  id: string,
  wsUrl: string,
  messageHandler: (data: T) => void
) => {
  return defineStore(id, () => {
    const isConnected = ref(false)
    const connectionError = ref<string | null>(null)
    const reconnectAttempts = ref(0)
    const maxReconnectAttempts = 5
    const reconnectDelay = 1000

    let ws: WebSocket | null = null
    let reconnectTimer: NodeJS.Timeout | null = null

    const connect = () => {
      try {
        ws = new WebSocket(wsUrl)
        
        ws.onopen = () => {
          isConnected.value = true
          connectionError.value = null
          reconnectAttempts.value = 0
        }

        ws.onmessage = (event) => {
          try {
            const message: WebSocketMessage<T> = JSON.parse(event.data)
            messageHandler(message.data)
          } catch (error) {
            logger.error('WebSocket message parsing error:', error)
          }
        }

        ws.onclose = () => {
          isConnected.value = false
          if (reconnectAttempts.value < maxReconnectAttempts) {
            reconnectTimer = setTimeout(() => {
              reconnectAttempts.value++
              connect()
            }, reconnectDelay * reconnectAttempts.value)
          } else {
            connectionError.value = '연결이 끊어졌습니다. 페이지를 새로고침해주세요.'
          }
        }

        ws.onerror = (error) => {
          connectionError.value = 'WebSocket 연결 오류가 발생했습니다.'
          logger.error('WebSocket error:', error)
        }
      } catch (error) {
        connectionError.value = 'WebSocket 연결을 초기화할 수 없습니다.'
        logger.error('WebSocket connection error:', error)
      }
    }

    const disconnect = () => {
      if (reconnectTimer) {
        clearTimeout(reconnectTimer)
        reconnectTimer = null
      }
      
      if (ws) {
        ws.close()
        ws = null
      }
      
      isConnected.value = false
    }

    const sendMessage = (message: unknown) => {
      if (ws && isConnected.value) {
        ws.send(JSON.stringify(message))
      }
    }

    onUnmounted(() => {
      disconnect()
    })

    return {
      isConnected: readonly(isConnected),
      connectionError: readonly(connectionError),
      connect,
      disconnect,
      sendMessage,
    }
  })
}
```

## Pinia 베스트 프랙티스 체크리스트
- [ ] 도메인별 스토어 분리
- [ ] 엄격한 타입 정의
- [ ] 상태 정규화 구현
- [ ] 선택적 구독 최적화
- [ ] 메모이제이션 활용
- [ ] 실시간 데이터 처리
- [ ] 에러 처리 구현
- [ ] 상태 지속성 관리

- [ ] 에러 처리 구현
- [ ] 상태 지속성 관리
