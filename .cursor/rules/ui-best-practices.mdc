# Headless UI + Tailwind CSS 베스트 프랙티스

## UI 컴포넌트 설계
- Headless UI의 접근성(ARIA, 키보드 네비게이션 등) 내장 로직을 적극 활용하세요.
- Tailwind CSS 유틸리티 클래스를 사용해 Figma 디자인을 1:1로 구현하세요.
- 디자인 토큰(색상, 간격, 폰트 등)은 Tailwind config와 theme 패키지에서 통합 관리하세요.
- TypeScript로 props, emits, slots 타입을 엄격하게 정의하세요.
- 컴포넌트는 최대한 단순하게, 상태/로직은 composable로 분리하세요.

## 모노레포 Headless UI + Tailwind 구조
- **공통 컴포넌트**: packages/ui/src/components에 Headless UI 기반 컴포넌트 배치
- **디자인 토큰/테마**: packages/theme에서 Tailwind config 및 토큰 관리
- **컴포저블/훅**: packages/ui/src/composables에 상태/로직 분리
- **Storybook 통합**: 모든 컴포넌트에 스토리와 autoDocs 태그 작성

## 성능 및 확장성
- **JIT 모드**: Tailwind JIT 모드로 빌드 속도와 번들 크기 최적화
- **반응형/다크모드**: Tailwind의 responsive, dark: 유틸리티 적극 활용
- **컴포넌트 추출**: 반복되는 UI 패턴은 별도 컴포넌트로 분리
- **접근성**: Headless UI의 a11y 보장 + 추가 ARIA 속성 필요시 직접 추가

## 예시 컴포넌트 패턴

```vue
<!-- packages/ui/src/components/Button.vue -->
<script setup lang="ts">
import { ref } from 'vue'
import { Menu, MenuButton, MenuItems, MenuItem } from '@headlessui/vue'

interface Props {
  label: string
  color?: 'primary' | 'secondary' | 'danger'
  disabled?: boolean
}
const props = withDefaults(defineProps<Props>(), {
  color: 'primary',
  disabled: false
})
</script>

<template>
  <button
    :class="[
      'px-4 py-2 rounded font-semibold transition',
      {
        'bg-primary-600 text-white hover:bg-primary-700': props.color === 'primary',
        'bg-secondary-100 text-secondary-900 hover:bg-secondary-200': props.color === 'secondary',
        'bg-red-600 text-white hover:bg-red-700': props.color === 'danger',
        'opacity-50 cursor-not-allowed': props.disabled
      }
    ]"
    :disabled="props.disabled"
  >
    {{ props.label }}
  </button>
</template>
```

## 테마/토큰 시스템
- Tailwind config에서 디자인 토큰(색상, 폰트, 간격 등) 확장
- theme 패키지에서 Figma 연동 토큰 자동화
- 예시: shared/config/tailwind.config.js 참고

## Storybook/테스트
- 모든 컴포넌트에 __stories__ 폴더에 base/variant 스토리 작성
- autoDocs 태그 필수
- 접근성 테스트(Storybook a11y addon 등) 권장

## 체크리스트
- [ ] Headless UI 컴포넌트/로직 적극 활용
- [ ] Tailwind 유틸리티로 Figma 1:1 구현
- [ ] 디자인 토큰 일원화 및 theme 패키지 연동
- [ ] 타입 안전성(Props/Emits/Slots) 보장
- [ ] Storybook/테스트/문서화
- [ ] 접근성(a11y) 구현
- [ ] 반응형/다크모드 지원
description:
globs:
alwaysApply: false
---
